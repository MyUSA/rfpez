// Generated by CoffeeScript 1.3.3
(function() {
  var App, AppView, Deliverable, DeliverableList, DeliverableView, Deliverables;

  Deliverable = Backbone.Model.extend({
    validate: function(attrs) {},
    defaults: function() {
      return {
        date: "",
        name: ""
      };
    },
    clear: function() {
      return this.destroy();
    }
  });

  DeliverableList = Backbone.Collection.extend({
    model: Deliverable
  });

  DeliverableView = Backbone.View.extend({
    tagName: "tr",
    template: _.template("<td>\n  <input type=\"text\" placeholder=\"Deliverable Name\" class=\"name-input\" value=\"<%= name %>\">\n</td>\n<td>\n  <span class=\"input-append datepicker date\">\n    <input type=\"text\" placeholder=\"Due Date\" class=\"date-input\" value=\"<%= date %>\">\n    <span class=\"add-on\">\n      <i class=\"icon-calendar\"></i>\n    </span>\n  </span>\n</td>\n<td>\n  <a class=\"btn remove-deliverable-button\"><i class=\"icon-trash\"></i></a>\n</td>"),
    events: {
      "click .remove-deliverable-button": "clear",
      "input .name-input": "updateWithDelay",
      "input .date-input": "updateWithDelay",
      "change .date-input": "updateWithDelay"
    },
    initialize: function() {
      this.model.bind("create", this.render, this);
      return this.model.bind("destroy", this.remove, this);
    },
    render: function() {
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    },
    updateWithDelay: function() {
      var _this = this;
      Rfpez.has_unsaved_changes = true;
      if (this.updateTimeout) {
        clearTimeout(this.updateTimeout);
      }
      return this.updateTimeout = setTimeout(function() {
        return _this.update();
      }, 200);
    },
    update: function() {
      Rfpez.has_unsaved_changes = false;
      return this.model.save({
        name: this.$el.find(".name-input").val(),
        date: this.$el.find(".date-input").val()
      });
    },
    clear: function() {
      return this.model.clear();
    }
  });

  AppView = Backbone.View.extend({
    initialize: function() {
      Deliverables.bind('add', this.addOne, this);
      Deliverables.bind('reset', this.reset, this);
      Deliverables.bind('all', this.render, this);
      return $(".add-deliverable-button").bind('click', this.addNew);
    },
    reset: function() {
      $("#deliverables-tbody").html('');
      return this.addAll();
    },
    render: function() {},
    addNew: function() {
      return Deliverables.create();
    },
    addOne: function(deliverable) {
      var html, view;
      view = new DeliverableView({
        model: deliverable
      });
      html = view.render().el;
      return $("#deliverables-tbody").append(html);
    },
    addAll: function() {
      return Deliverables.each(this.addOne);
    }
  });

  App = {};

  Deliverables = {};

  Rfpez.Backbone.SowDeliverables = function(project_id, initialModels) {
    Deliverables = new DeliverableList;
    App = new AppView({
      collection: Deliverables,
      project_id: project_id
    });
    Deliverables.reset(initialModels);
    Deliverables.url = "/projects/" + project_id + "/deliverables";
    return App;
  };

}).call(this);
